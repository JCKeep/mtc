<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mtc.mapper.MessageMapper">
  <resultMap id="BaseResultMap" type="com.example.mtc.model.Message">
    <id column="message_id" jdbcType="BIGINT" property="messageId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="message_from" jdbcType="BIGINT" property="messageFrom" />
    <result column="message_date" jdbcType="TIMESTAMP" property="messageDate" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.mtc.model.Message">
    <result column="message_content" jdbcType="LONGVARCHAR" property="messageContent" />
  </resultMap>
  <sql id="Base_Column_List">
    message_id, user_id, message_from, message_date
  </sql>
  <sql id="Blob_Column_List">
    message_content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_personal_message
    where message_id = #{messageId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_personal_message
    where message_id = #{messageId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.example.mtc.model.Message">
    insert into t_personal_message (message_id, user_id, message_from,
      message_date, message_content)
    values (#{messageId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{messageFrom,jdbcType=BIGINT},
      #{messageDate,jdbcType=TIMESTAMP}, #{messageContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.mtc.model.Message">
    insert into t_personal_message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="messageId != null">
        message_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="messageFrom != null">
        message_from,
      </if>
      <if test="messageDate != null">
        message_date,
      </if>
      <if test="messageContent != null">
        message_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="messageId != null">
        #{messageId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="messageFrom != null">
        #{messageFrom,jdbcType=BIGINT},
      </if>
      <if test="messageDate != null">
        #{messageDate,jdbcType=TIMESTAMP},
      </if>
      <if test="messageContent != null">
        #{messageContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.mtc.model.Message">
    update t_personal_message
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="messageFrom != null">
        message_from = #{messageFrom,jdbcType=BIGINT},
      </if>
      <if test="messageDate != null">
        message_date = #{messageDate,jdbcType=TIMESTAMP},
      </if>
      <if test="messageContent != null">
        message_content = #{messageContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where message_id = #{messageId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.mtc.model.Message">
    update t_personal_message
    set user_id = #{userId,jdbcType=BIGINT},
      message_from = #{messageFrom,jdbcType=BIGINT},
      message_date = #{messageDate,jdbcType=DATE},
      message_content = #{messageContent,jdbcType=LONGVARCHAR}
    where message_id = #{messageId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.mtc.model.Message">
    update t_personal_message
    set user_id = #{userId,jdbcType=BIGINT},
      message_from = #{messageFrom,jdbcType=BIGINT},
      message_date = #{messageDate,jdbcType=TIMESTAMP}
    where message_id = #{messageId,jdbcType=BIGINT}
  </update>

  <select id="selectMessage" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_personal_message
    where (user_id = #{myId,jdbcType=BIGINT} and message_from = #{uid,jdbcType=BIGINT})
       or (user_id = #{uid,jdbcType=BIGINT} and message_from = #{myId,jdbcType=BIGINT})
    order by t_personal_message.message_date
  </select>

  <select id="peekMsg" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_personal_message
    where (user_id = #{myId,jdbcType=BIGINT} and message_from = #{uid,jdbcType=BIGINT})
    or (user_id = #{uid,jdbcType=BIGINT} and message_from = #{myId,jdbcType=BIGINT})
    order by t_personal_message.message_date desc
    limit 1
  </select>
</mapper>